#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('test:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
require('../service/rabbitmq');
require('../service/rabbitmqSuper');
require('../mongoModel/_db');
// require('./rpcServer');
require('../rpc/server');
// var schedule = require('../service/node_schedule');
global.SphinxClient = require("sphinxapi");

global.sphinx = new SphinxClient();
sphinx.SetServer('localhost', 9312);
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8090');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// var httpsserver = https.createServer({
//     key: fs.readFileSync('./CA/star.langjie.com.key', 'utf8'), 
//     cert: fs.readFileSync('./CA/star.langjie.com.pem', 'utf8')
// },app);
// var callIO = require('socket.io')('8899');
var callIO = require('socket.io')(server);
callIO.listen(8899);

require('./wsServer');


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, function () {
	LOG('ok');
});
server.on('error', onError);
server.on('listening', onListening);

// httpsserver.listen(443, function () {
// 	LOG('oks');
// });
callIO.of('/call').on('connection', function (socket) {
	require('../action/socketCall')(socket,callIO);
});
callIO.of('/webrtc').on('connection', function (socket) {
	require('../action/socketWebrtc')(socket,callIO);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
	require('../service/redis');
}
